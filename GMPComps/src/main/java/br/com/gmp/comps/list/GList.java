package br.com.gmp.comps.list;

import br.com.gmp.comps.GColors;
import br.com.gmp.comps.model.GListModel;
import com.lowagie.text.Font;
import java.awt.Component;
import java.awt.event.KeyEvent;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JList;
import javax.swing.ListCellRenderer;
import javax.swing.SwingUtilities;

/**
 * Lista customizada
 *
 * @author kaciano
 * @version 1.0
 */
public class GList extends JList {

    private GListModel<?> model;
    private boolean keyDelete;

    /**
     * Cria nova instancia de GList
     */
    public GList() {
        this.model = new GListModel<>();
        initialize();
    }

    /**
     * Cria nova instancia de GList
     *
     * @param model {@code GListModel(?)} Modelo
     */
    public GList(GListModel<?> model) {
        this.model = model;
    }

    /**
     * Método de inicialização
     */
    private void initialize() {
        initComponents();
        setModel(model);
    }

    @Override
    public ListCellRenderer getCellRenderer() {
        DefaultListCellRenderer defaultRenderer = new DefaultListCellRenderer() {

            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                Component comp = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                if (index % 2 == 0 && !isSelected) {
                    comp.setBackground(GColors.FOCUS);
                    comp.getFont().deriveFont(Font.NORMAL);
                } else if (isSelected) {
                    comp.setBackground(getSelectionBackground());
                    comp.getFont().deriveFont(Font.BOLD);
                }
                return comp;
            }

        };
        return defaultRenderer;
    }

    /**
     * Remove apenas os itens selecionados, caso não aja nenhum, dispara um
     * alerta
     */
    public void removeSelected() {
        if (getSelectedIndices() != null) {
            model.remove(getSelectedIndices());
        }
    }

    @Override
    public GListModel<?> getModel() {
        return model;
    }

    /**
     * Modifica o modelo de listas
     *
     * @param model {@code GListModel(?)} Modelo
     */
    public void setModel(GListModel<?> model) {
        this.model = model;
        super.setModel(this.model);
    }

    /**
     * Retorna se a tabela pode deletar com a tecla DELETE
     *
     * @return {@code boolean} Pode deletar?
     */
    public boolean isKeyDelete() {
        return keyDelete;
    }

    /**
     * Modifica se a tabela pode deletar com a tecla DELETE
     *
     * @param keyDelete {@code boolean} Pode deletar?
     */
    public void setKeyDelete(boolean keyDelete) {
        this.keyDelete = keyDelete;
    }

    /**
     * Ação disparada quando a tecla {@code DELETE} é pressionada
     */
    private void delete() {
        if (keyDelete) {
            System.out.println("Deletando " + getSelectedIndices().length + " registros!");
            if (getSelectedIndices().length > 0) {
                for (int i : getSelectedIndices()) {
                    getModel().remove(i);
                    repaint();
                    revalidate();
                    SwingUtilities.updateComponentTreeUI(this);
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        if (KeyEvent.VK_DELETE == evt.getKeyCode()) {
            delete();
        }
    }//GEN-LAST:event_formKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
